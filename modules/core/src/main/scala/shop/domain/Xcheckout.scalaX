package shop.domain

import derevo.cats._
import derevo.circe.magnolia.{decoder, encoder}
import derevo.derive
import eu.timepit.refined.api._
import eu.timepit.refined.boolean.And
import eu.timepit.refined.collection.Size
import eu.timepit.refined.string.{MatchesRegex, ValidInt}
import io.circe.Decoder
import io.estatico.newtype.macros.newtype
import shop.ext.refined._

import java.util.regex.Pattern

object checkoutX {
  type Rgx = "^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$"

  type CardNamePred       = String Refined MatchesRegex[Rgx]
  type CardNumberPred     = Long Refined Size[16]
  type CardExpirationPred = String Refined (Size[4] And ValidInt)
  type CardCVVPred        = Int Refined Size[3]


  sealed abstract class UrlEncoded
  object UrlEncoded {
    private[this] val valid: Pattern =
      Pattern.compile("[a-zA-Z]*")
    implicit def urlValidate(s: String): Validate.Plain[String, UrlEncoded] =
      Validate.fromPredicate(
        ss => valid.matcher(s).find(),
        identity,
        new UrlEncoded {}
      )
  }
 // import UrlEncoded._
  def lookupu(urle: Validate.Plain[String, UrlEncoded]):  Option[UrlEncoded] = ???
  lookupu("Aswss")


  @derive(decoder, encoder, show)
  @newtype
  case class CardName(value: CardNamePred)

  @derive(encoder, show)
  @newtype
  case class CardNumber(value: CardNumberPred)
  object CardNumber {
    implicit val jsonDecoder: Decoder[CardNumber] =
      decoderOf[Long, Size[16]].map(CardNumber(_))
  }

  val cn = CardNumber(Refined.unsafeApply(23111))

  import eu.timepit.refined.api.Refined
  import eu.timepit.refined.collection.Contains
  type Username = String Refined Contains['g']
  def lookup(username: Username):  Option[Username] = ???
  import eu.timepit.refined.auto._
  import eu.timepit.refined.generic._
  lookup( "aeinstein" )

  lookup("csagan")

  @derive(encoder, show)
  @newtype
  case class CardExpiration(value: CardExpirationPred)
  object CardExpiration {
    implicit val jsonDecoder: Decoder[CardExpiration] =
      decoderOf[String, Size[4] And ValidInt].map(CardExpiration(_))
  }

  @derive(encoder, show)
  @newtype
  case class CardCVV(value: CardCVVPred)
  object CardCVV {
    implicit val jsonDecoder: Decoder[CardCVV] =
      decoderOf[Int, Size[3]].map(CardCVV(_))
  }

  @derive(decoder, encoder, show)
  case class Card(
      name: CardName,
      number: CardNumber,
      expiration: CardExpiration,
      cvv: CardCVV
  )
}
